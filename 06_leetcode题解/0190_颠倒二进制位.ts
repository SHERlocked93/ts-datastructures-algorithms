/*
创建于 2021年1月12日 下午3:33:13
作者: sherlocked93
功能: 颠倒二进制位
地址: https://leetcode-cn.com/problems/reverse-bits/

颠倒给定的 32 位无符号整数的二进制位。

示例 1：
输入: 00000010100101000001111010011100
输出: 00111001011110000010100101000000
解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
     因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。

示例 2：
输入：11111111111111111111111111111101
输出：10111111111111111111111111111111
解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
    因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。

提示：
请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的示例 2中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。

进阶:
如果多次调用这个函数，你将如何优化你的算法？

## 思路

1. 思路和0007整数反转一样，但是边界条件不能是num>0因为32位二进制无符号整数头部的0会转换到末尾，所以固定循环32次

## 复杂度分析
- 时间复杂度：O(n) 一层循环
- 空间复杂度：O(1) 用了两个变量来存储
*/


function reverseBits(n: number): number {
    let res = 0
    let count = 32
    while (count-- > 0) {
        res = res * 2 + n % 2
        n >>>= 1
    }
    return res
};

console.log(
  reverseBits(0b00000010100101000001111010011100)   //  964176192 (0b00111001011110000010100101000000)
);
